https://git-scm.com/docs

--- Tricks
touch .gitignore    => create an empty gitignore file
code .              => open visual code on current folder
explorer .          => open file explorer on current folder


--- Setup and Config
git --version       => display git's version
git help <command>  => online help about the command
git status          => status information

git config --global -l (--list) => list all variables set in config file
git config --global user.name "user name"
git config --global user.email "email"
git config --global core.editor <editor name>
git config --global core.autocrlf true


--- Getting and Creating Projects
git init          => create local repository
git clone <path>  => clone remote repository


--- Basic Snapshotting
git add <filename>      => add file to staging area
git add <directory>     => add folder to staging area
git add -u (--update)   => add modified files to staging area
git add .               => add all (modified and untracked) files to stating area
git add -A (--all)      => add all (modified and untracked) files to stating area

git commit -m "description"             => commit locally
git commit -am "description"            => add and commit modified files
git commit --amend -m "new description" => Change commit message unpushed

git diff <SHA1>..<SHA1> => see differences between to commits
git diff HEAD~<number>  => see differences between last commit and previous


--- Branching and Merging
git log                         => list commits
git log --oneline               => list each commit on one line
git log --oneline | wc -l       => count commits
git log --online --graph        => list commits showing branches and merges
git log --stat                  => display the number of insertions and deletions to each file altered by each commit
git log --grep=<text pattern>   => Search by commit message
git shortlog                    => list commits by author
git shortlog -sne               => list author and email order by number of commits

git stash list                  => list all your dirty changes
git stash                       => save your dirty changes (no untracked files) to a temporal directory
git stash push -m "description" => save your dirty changes (no untracked files) with a message
git stash pop                   => remove last stashed entry and apply it on top of the current working tree state
git stash apply                 => like pop but do not remove the state from the stash list
git stash clear                 => delete all stash entries

git branch                              => list local branches
git branch -r (--remote)                => list remote branches
gti branch -a (--all)                   => list all branches
git checkout <branch name>              => switch to local branch
git checkout -b <branch name>           => create new branch in local repository
git checkout <SHA1>                     => check out a particular commit on the current branch
git push origin <branch name>           => push the branch to remote origin
git branch -d (--delete) <branch name>  => delete local branch 
git branch -d -r <branch name>          => delete a remote branch

git merge <branch name> => locally merge the named branch to the checked-out branch
git merge --abort       => abort a Git merge after the merge has resulted in conflicts.


--- Sharing and Updating Projects
git fetch -v    => fetches and display all changes to be pulled down
git push -v     => push changes to remote

git remote -v                        => display the remote source of the local repository
git remote add <alias> <url source>  => add a remote for your local repository
git remote remove <alias>            => remove the remote for your local repository


--- Inspection and Comparison
git show HEAD   => show changes last commit
git show HEAD~<number>  => show changes previous commits
git show <SHA1> => show changes commit


--- Patching
git cherry-pick <SHA1>      => apply the changes introduced by some existing commits
git rebase <branch name>    => locally rebase the named branch on top of the checked-out branch

git revert <SHA1>       => revert some existing commits
git revert -m 1 <SHA1>  => revert a merge commit


--- Undo changes locally
git checkout <filename>     => undo file changes (before it is added to staging area)
git checkout <foldername>   => undo all files changes in folder (before it is added to staging area)
git reset --hard            => undo all files changes (before it is added to stating area)


--- Delete untracked files
git clean -n (--dry-run)            => information about files would be removed
git clean -f (--force) <filename>   => remove untracked file
git clean -f (--force) <foldername> => remove untracked files in folder
git clean -f (--force)              => remove all untracked files
git clean -i (--interactive)        => ask you for options before removing anything


--- Remove files from staging area
git reset <filename>     => unstage file
git reset <foldername>   => unstage files in folder
git reset                => unstage all files


--- Remove commits locally
git reset --soft HEAD~1  => uncommit last commit
git reset --hard HEAD~1  => remove last commit


--- Tagging
git tag                => list local tags
git tag <tagname>      => create local tag
git tag -a <tagname>   => create a local tag with annotations
git tag -s <tagname>   => create a local tag signed (by default with annotations)
git push --tags        => push the local tags to remote
